package argon2id

import (
	"bytes"
	"testing"
)

type testVector struct {
	password string
	salt     string
	keyLen   int
	expected []byte
}

func TestArgon2id_Hash(t *testing.T) {
	good := testVector{
		password: "secret",
		salt:     "salt",
		keyLen:   64,
		expected: []byte{
			0x1e, 0xf1, 0x3a, 0xd4, 0xf1, 0x9e, 0x1c, 0x51,
			0x15, 0x41, 0xb2, 0xca, 0xc0, 0xc6, 0xb3, 0xe2,
			0xbd, 0x3a, 0xbc, 0xba, 0xc9, 0xb2, 0x27, 0x33,
			0x79, 0x34, 0xe8, 0x3d, 0x65, 0xfb, 0xa9, 0x4d,
			0x15, 0x2e, 0x0e, 0xe8, 0x66, 0xed, 0xb7, 0x80,
			0xc7, 0x6c, 0x95, 0x46, 0x61, 0x28, 0x23, 0x4c,
			0x8b, 0xc0, 0xbf, 0x82, 0x75, 0xf6, 0xb5, 0x13,
			0x2f, 0xe8, 0xfb, 0x2a, 0xf5, 0xc9, 0xf0, 0xbf,
		},
	}

	s := New(good.keyLen)
	k := s.Hash([]byte(good.password), []byte(good.salt))

	if !bytes.Equal(k, good.expected) {
		t.Errorf("expected %x, got %x", good.expected, k)
	}
}

func TestArgon2id_HashVar(t *testing.T) {
	good := testVector{
		password: "secret",
		salt:     "salt",
		keyLen:   64,
		expected: []byte{
			0x8c, 0x57, 0x81, 0x33, 0x28, 0xa8, 0xa0, 0x29,
			0x3c, 0x1b, 0xdd, 0x4b, 0x33, 0xf7, 0x27, 0x39,
			0xe8, 0x00, 0x81, 0x70, 0x36, 0xa0, 0xf6, 0xff,
			0x3d, 0x52, 0xe7, 0xe4, 0x5e, 0xab, 0x68, 0x20,
			0xca, 0xa3, 0x8e, 0x6b, 0xa5, 0x74, 0x63, 0xd1,
			0x9c, 0x5c, 0x2c, 0x51, 0x6a, 0x2a, 0xb3, 0x5b,
			0x4e, 0x6d, 0x0b, 0xc0, 0x67, 0x1e, 0xa5, 0xaa,
			0x8f, 0xff, 0x6d, 0x97, 0xb0, 0x65, 0xc6, 0x05,
		},
	}

	s := New(good.keyLen)
	k := s.HashVar([]byte(good.password), []byte(good.salt), []byte(good.salt))

	if !bytes.Equal(k, good.expected) {
		t.Errorf("expected %x, got %x", good.expected, k)
	}
}

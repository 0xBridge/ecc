package mhf

import (
	"bytes"
	"testing"

	"github.com/bytemare/cryptotools/mhf/internal/argon2id"

	"github.com/stretchr/testify/assert"

	"github.com/bytemare/cryptotools/encoding"
)

type testVector struct {
	mode            Identifier
	password        string
	salt            string
	keyLen          int
	expectedHash    []byte
	expectedHashVar []byte
}

var bad = testVector{mode: 0}

var goodHash = map[Identifier]testVector{
	Argon2id: {
		mode:     Argon2id,
		password: "secret",
		salt:     "salt",
		keyLen:   64,
		expectedHash: []byte{
			0x1e, 0xf1, 0x3a, 0xd4, 0xf1, 0x9e, 0x1c, 0x51,
			0x15, 0x41, 0xb2, 0xca, 0xc0, 0xc6, 0xb3, 0xe2,
			0xbd, 0x3a, 0xbc, 0xba, 0xc9, 0xb2, 0x27, 0x33,
			0x79, 0x34, 0xe8, 0x3d, 0x65, 0xfb, 0xa9, 0x4d,
			0x15, 0x2e, 0x0e, 0xe8, 0x66, 0xed, 0xb7, 0x80,
			0xc7, 0x6c, 0x95, 0x46, 0x61, 0x28, 0x23, 0x4c,
			0x8b, 0xc0, 0xbf, 0x82, 0x75, 0xf6, 0xb5, 0x13,
			0x2f, 0xe8, 0xfb, 0x2a, 0xf5, 0xc9, 0xf0, 0xbf,
		},
		expectedHashVar: []byte{
			0x8c, 0x57, 0x81, 0x33, 0x28, 0xa8, 0xa0, 0x29,
			0x3c, 0x1b, 0xdd, 0x4b, 0x33, 0xf7, 0x27, 0x39,
			0xe8, 0x00, 0x81, 0x70, 0x36, 0xa0, 0xf6, 0xff,
			0x3d, 0x52, 0xe7, 0xe4, 0x5e, 0xab, 0x68, 0x20,
			0xca, 0xa3, 0x8e, 0x6b, 0xa5, 0x74, 0x63, 0xd1,
			0x9c, 0x5c, 0x2c, 0x51, 0x6a, 0x2a, 0xb3, 0x5b,
			0x4e, 0x6d, 0x0b, 0xc0, 0x67, 0x1e, 0xa5, 0xaa,
			0x8f, 0xff, 0x6d, 0x97, 0xb0, 0x65, 0xc6, 0x05,
		},
	},
	Scrypt: {
		mode:     Scrypt,
		password: "secret",
		salt:     "salt",
		keyLen:   64,
		expectedHash: []byte{
			0xfe, 0x2c, 0x14, 0xd4, 0x29, 0x65, 0xd2, 0x92,
			0x01, 0x97, 0x55, 0xb7, 0xf7, 0xaf, 0xad, 0xe5,
			0x85, 0x41, 0x20, 0xd0, 0x78, 0x06, 0x95, 0x1a,
			0x23, 0xee, 0x52, 0xc8, 0xe8, 0x11, 0x6a, 0xea,
			0xa0, 0x1a, 0x2b, 0x56, 0x4a, 0xe1, 0x66, 0x92,
			0x6c, 0x58, 0x4c, 0xee, 0x9b, 0x61, 0x73, 0xc2,
			0x43, 0x06, 0x14, 0x63, 0xba, 0x23, 0xa7, 0x14,
			0x7a, 0x24, 0x59, 0xb1, 0x79, 0xfc, 0x9c, 0x4c,
		},
		expectedHashVar: []byte{
			0xdf, 0xa8, 0x40, 0x21, 0x26, 0x43, 0x56, 0x6e,
			0xd5, 0x85, 0x02, 0x1a, 0x42, 0x04, 0x35, 0x0e,
			0xdb, 0xeb, 0x32, 0x55, 0x61, 0x10, 0xc5, 0x9f,
			0x29, 0x6a, 0x7c, 0xa1, 0x06, 0xb5, 0xd9, 0x94,
			0x10, 0x1d, 0xc1, 0x47, 0xf7, 0xb8, 0xd3, 0x14,
			0x43, 0x31, 0x05, 0x6d, 0xa4, 0x90, 0xad, 0xd3,
			0x70, 0x1e, 0x47, 0xcb, 0x9a, 0x1a, 0xc4, 0xa6,
			0xa9, 0xf7, 0xcf, 0x08, 0xc3, 0x72, 0x31, 0x17,
		},
	},
}

func TestAvailability(t *testing.T) {
	for id := range goodHash {
		if !id.Available() {
			t.Errorf("%v is not available, but should be", id)
		}
	}

	wrong := 5
	if Identifier(wrong).Available() {
		t.Errorf("%v is considered available when it should not", wrong)
	}
}

func TestMHF(t *testing.T) {
	assert.PanicsWithError(t, argon2id.ErrKeyLen.Error(), func() { Argon2id.Get(-1) }, "Argon2id : expected error on negative key length")
	assert.PanicsWithError(t, argon2id.ErrKeyLen.Error(), func() { Argon2id.Get(1 << 32) }, "Argon2id : expected error on high integer")

	// Should pass
	for id, good := range goodHash {
		h := id.Get(good.keyLen)

		// Test Hash
		k := h.Hash([]byte(good.password), []byte(good.salt))

		if !bytes.Equal(k, good.expectedHash) {
			t.Errorf("%v: expected %x, got %x", id, good.expectedHash, k)
		}

		// Test HashVar
		k = h.HashVar([]byte(good.password), []byte(good.salt), []byte(good.salt))

		if !bytes.Equal(k, good.expectedHashVar) {
			t.Errorf("%v: expected %x, got %x", id, good.expectedHashVar, k)
		}
	}
}

func TestDecode(t *testing.T) {
	for id, good := range goodHash {
		h := id.Get(good.keyLen)

		e, err := encoding.JSON.Encode(h)
		if err != nil {
			t.Error(err)
		}

		d, err := id.Decode(e, encoding.JSON)
		if err != nil {
			t.Error(err)
		}

		assert.Equal(t, h, d)
	}
}

package scrypt

import (
	"bytes"
	"testing"
)

type testVector struct {
	password string
	salt     string
	keyLen   int
	expected []byte
}

func TestScrypt_Hash(t *testing.T) {
	good := testVector{
		password: "secret",
		salt:     "salt",
		keyLen:   64,
		expected: []byte{
			0xfe, 0x2c, 0x14, 0xd4, 0x29, 0x65, 0xd2, 0x92,
			0x01, 0x97, 0x55, 0xb7, 0xf7, 0xaf, 0xad, 0xe5,
			0x85, 0x41, 0x20, 0xd0, 0x78, 0x06, 0x95, 0x1a,
			0x23, 0xee, 0x52, 0xc8, 0xe8, 0x11, 0x6a, 0xea,
			0xa0, 0x1a, 0x2b, 0x56, 0x4a, 0xe1, 0x66, 0x92,
			0x6c, 0x58, 0x4c, 0xee, 0x9b, 0x61, 0x73, 0xc2,
			0x43, 0x06, 0x14, 0x63, 0xba, 0x23, 0xa7, 0x14,
			0x7a, 0x24, 0x59, 0xb1, 0x79, 0xfc, 0x9c, 0x4c,
		},
	}

	s := New(good.keyLen)
	k := s.Hash([]byte(good.password), []byte(good.salt))

	if !bytes.Equal(k, good.expected) {
		t.Errorf("expected %x, got %x", good.expected, k)
	}
}

func TestScrypt_HashVar(t *testing.T) {
	good := testVector{
		password: "secret",
		salt:     "salt",
		keyLen:   64,
		expected: []byte{
			0xdf, 0xa8, 0x40, 0x21, 0x26, 0x43, 0x56, 0x6e,
			0xd5, 0x85, 0x02, 0x1a, 0x42, 0x04, 0x35, 0x0e,
			0xdb, 0xeb, 0x32, 0x55, 0x61, 0x10, 0xc5, 0x9f,
			0x29, 0x6a, 0x7c, 0xa1, 0x06, 0xb5, 0xd9, 0x94,
			0x10, 0x1d, 0xc1, 0x47, 0xf7, 0xb8, 0xd3, 0x14,
			0x43, 0x31, 0x05, 0x6d, 0xa4, 0x90, 0xad, 0xd3,
			0x70, 0x1e, 0x47, 0xcb, 0x9a, 0x1a, 0xc4, 0xa6,
			0xa9, 0xf7, 0xcf, 0x08, 0xc3, 0x72, 0x31, 0x17,
		},
	}

	s := New(good.keyLen)
	k := s.HashVar([]byte(good.password), []byte(good.salt), []byte(good.salt))

	if !bytes.Equal(k, good.expected) {
		t.Errorf("expected %x, got %x", good.expected, k)
	}
}
